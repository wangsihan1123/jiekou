{"name": "插件管理-删除自定义插件临时访问日志", "status": "broken", "statusDetails": {"message": "TypeError: the JSON object must be str, bytes or bytearray, not NoneType", "trace": "datas = {'case_id': 'TC009', 'data': '{}', 'expected': '{\"status_code\":200}', 'extractor': None, ...}\na_login = {'cookie': 'FULONGTECH_SESSION=ad25457a-ff16-40ce-974f-1cfe0f4db54f'}\n\n    @allure.title(\"插件管理-查询用户默认场景\")\n    @pytest.mark.parametrize('datas', excel_datas)\n    def test_01_workspace_mnt(datas, a_login):\n        \"\"\"插件管理-查询用户默认场景\"\"\"\n        datas = json.dumps(datas)\n    \n        if '#now_time_stamp#' in datas:\n            datas = datas.replace('#now_time_stamp#', str(Handler.now_time_stamp))\n    \n        # 替换\n        datas = Handler.replace_data(datas)\n        # 转化成字典\n        datas = json.loads(datas)\n    \n        allure.dynamic.title(datas[\"title\"])\n        allure.dynamic.description(\"测试{}接口.\".format(datas[\"title\"]))\n    \n        headers = json.loads(datas[\"headers\"])\n        headers[\"Cookie\"] = a_login[\"cookie\"]\n    \n        with allure.step('请求方式'):\n            allure.attach('{}'.format(datas[\"method\"]), name='{}请求方式'.format(datas[\"title\"]))\n    \n        with allure.step('请求路径'):\n            allure.attach('{}'.format(datas[\"path\"]), name='{}请求路径'.format(datas[\"title\"]))\n    \n        with allure.step('请求体'):\n            allure.attach('{}'.format(datas[\"data\"]), name='{}请求体'.format(datas[\"title\"]))\n        logger.info(\"{}请求路径为:{},请求体为:{}\".format(datas[\"title\"], datas[\"path\"], datas[\"data\"]))\n    \n>       files = json.loads(datas[\"files\"])\n\ntests\\test_01_workspace_mnt.py:46: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ns = None, cls = None, object_hook = None, parse_float = None, parse_int = None\nparse_constant = None, object_pairs_hook = None, kw = {}\n\n    def loads(s, *, cls=None, object_hook=None, parse_float=None,\n            parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):\n        \"\"\"Deserialize ``s`` (a ``str``, ``bytes`` or ``bytearray`` instance\n        containing a JSON document) to a Python object.\n    \n        ``object_hook`` is an optional function that will be called with the\n        result of any object literal decode (a ``dict``). The return value of\n        ``object_hook`` will be used instead of the ``dict``. This feature\n        can be used to implement custom decoders (e.g. JSON-RPC class hinting).\n    \n        ``object_pairs_hook`` is an optional function that will be called with the\n        result of any object literal decoded with an ordered list of pairs.  The\n        return value of ``object_pairs_hook`` will be used instead of the ``dict``.\n        This feature can be used to implement custom decoders.  If ``object_hook``\n        is also defined, the ``object_pairs_hook`` takes priority.\n    \n        ``parse_float``, if specified, will be called with the string\n        of every JSON float to be decoded. By default this is equivalent to\n        float(num_str). This can be used to use another datatype or parser\n        for JSON floats (e.g. decimal.Decimal).\n    \n        ``parse_int``, if specified, will be called with the string\n        of every JSON int to be decoded. By default this is equivalent to\n        int(num_str). This can be used to use another datatype or parser\n        for JSON integers (e.g. float).\n    \n        ``parse_constant``, if specified, will be called with one of the\n        following strings: -Infinity, Infinity, NaN.\n        This can be used to raise an exception if invalid JSON numbers\n        are encountered.\n    \n        To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``\n        kwarg; otherwise ``JSONDecoder`` is used.\n    \n        The ``encoding`` argument is ignored and deprecated since Python 3.1.\n        \"\"\"\n        if isinstance(s, str):\n            if s.startswith('\\ufeff'):\n                raise JSONDecodeError(\"Unexpected UTF-8 BOM (decode using utf-8-sig)\",\n                                      s, 0)\n        else:\n            if not isinstance(s, (bytes, bytearray)):\n>               raise TypeError(f'the JSON object must be str, bytes or bytearray, '\n                                f'not {s.__class__.__name__}')\nE               TypeError: the JSON object must be str, bytes or bytearray, not NoneType\n\nC:\\Program Files\\Python38\\lib\\json\\__init__.py:341: TypeError"}, "description": "测试插件管理-删除自定义插件临时访问日志接口.", "steps": [{"name": "请求方式", "status": "passed", "attachments": [{"name": "插件管理-删除自定义插件临时访问日志请求方式", "source": "683019f5-6981-40d3-aa27-070e0b7b8b01-attachment.attach"}], "start": 1704247964758, "stop": 1704247964758}, {"name": "请求路径", "status": "passed", "attachments": [{"name": "插件管理-删除自定义插件临时访问日志请求路径", "source": "a27696e3-a7d9-4231-bc78-bcebe35e4c4a-attachment.attach"}], "start": 1704247964759, "stop": 1704247964759}, {"name": "请求体", "status": "passed", "attachments": [{"name": "插件管理-删除自定义插件临时访问日志请求体", "source": "a190fa0b-2e09-48e7-9ed7-de27cc658ad4-attachment.attach"}], "start": 1704247964759, "stop": 1704247964760}], "attachments": [{"name": "stderr", "source": "033e54ba-d606-41a3-8961-41f82b83822a-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "datas", "value": "{'case_id': 'TC009', 'title': '插件管理-删除自定义插件临时访问日志', 'headers': '{}', 'path': '/OneHit/plugin/temp/log/#uuid#', 'method': 'delete', 'files': None, 'json': '{\"name\":\"8899\"}', 'data': '{}', 'expected': '{\"status_code\":200}', 'extractor': None}"}], "start": 1704247964757, "stop": 1704247964761, "uuid": "d5dde278-240a-4ab1-8a03-bf5e5d7cfb52", "historyId": "5fbb9ae1694dd1786de17b579da38887", "testCaseId": "4dce2d0bd632021e913ac9a6b569902a", "fullName": "tests.test_01_workspace_mnt#test_01_workspace_mnt", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_01_workspace_mnt"}, {"name": "host", "value": "wangsihan-PC"}, {"name": "thread", "value": "21520-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_01_workspace_mnt"}]}